{"version":3,"file":"static/js/676.60a5dbe5.chunk.js","mappings":"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","sources":["common/utils/useForm.tsx","common/utils/validationRules.ts","components/Block/styles.ts","components/Block/index.tsx","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { notification } from \"antd\";\r\n// import axios from \"axios\";\r\nimport { validateProps } from \"../types\";\r\n\r\nconst baseValues = { subject: \"\", message: \"\" };\r\n\r\nexport const useForm = (validate: any) => {\r\n  const [values, setValues] = useState<validateProps>(baseValues);\r\n  const [errors, setErrors] = useState({});\r\n  const [shouldSubmit, setShouldSubmit] = useState(false);\r\n\r\n  const openNotificationWithIcon = () => {\r\n    notification[\"success\"]({\r\n      message: \"Email created\",\r\n      description: \"Please continue to send the email.\",\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (event: React.ChangeEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    let err = validate(values)\r\n    setErrors(err);\r\n    // Your url for API\r\n    if (Object.keys(err).length === 0) {\r\n      window.location.href = `mailto:jacob.jiskoot@gmail.com?subject=${encodeURIComponent(values.subject)}&body=${encodeURIComponent(values.message)}`;\r\n\r\n      setShouldSubmit(true);\r\n    }\r\n\r\n    // if (Object.keys(values).length === 3) {\r\n    //   axios\r\n    //     .post(url)\r\n    //     .then(() => {\r\n    //       setShouldSubmit(true);\r\n    //     });\r\n    // }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(errors).length === 0 && shouldSubmit) {\r\n      setValues(baseValues);\r\n      openNotificationWithIcon();\r\n    }\r\n  }, [errors, shouldSubmit]);\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    event.persist();\r\n    setValues((values) => ({\r\n      ...values,\r\n      [event.target.name]: event.target.value,\r\n    }));\r\n    setErrors((errors) => ({ ...errors, [event.target.name]: \"\" }));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values,\r\n    errors,\r\n  };\r\n};\r\n","import { validateProps } from \"../../common/types\";\r\n\r\nexport default function validate(values: validateProps) {\r\n  let errors = {} as validateProps;\r\n\r\n  if (!values.subject) {\r\n    errors.subject = \"Subject is required\";\r\n  }\r\n  // if (!values.email) {\r\n  //   errors.email = \"Email address is required\";\r\n  // } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n  //   errors.email = \"Email address is invalid\";\r\n  // }\r\n  if (!values.message) {\r\n    errors.message = \"Message is required\";\r\n  }\r\n  return errors;\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Content = styled(\"p\")`\r\n  margin-top: 1.5rem;\r\n`;\r\n\r\nexport const Container = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 700px;\r\n`;\r\n\r\nexport const TextWrapper = styled(\"div\")`\r\n  border-radius: 3rem;\r\n  max-width: 400px;\r\n`;\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { Container, TextWrapper, Content } from \"./styles\";\r\n\r\ninterface Props {\r\n  title: string;\r\n  content: string;\r\n  t: any;\r\n}\r\n\r\nconst Block = ({ title, content, t }: Props) => {\r\n  return (\r\n    <Container>\r\n      <h6>{t(title)}</h6>\r\n      <TextWrapper>\r\n        <Content>{t(content)}</Content>\r\n      </TextWrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Block);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n`;\r\n\r\nexport const StyledInput = styled(\"input\")`\r\n  font-size: 0.875rem;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n  margin-bottom: -0.625rem;\r\n`;\r\n\r\nexport const StyledTextArea = styled(\"textarea\")`\r\n  resize: none;\r\n  font-size: 0.875rem;\r\n  height: 185px;\r\n`;\r\n\r\nexport const Label = styled(\"label\")`\r\n  display: block;\r\n  padding-bottom: 10px;\r\n  text-transform: capitalize;\r\n`;\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { Container, StyledInput } from \"./styles\";\r\nimport { Label } from \"../TextArea/styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst Input = ({ name, value, placeholder, onChange, t }: InputProps) => (\r\n  <Container>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledInput\r\n      placeholder={t(placeholder)}\r\n      name={name}\r\n      value={value}\r\n      id={name}\r\n      onChange={onChange}\r\n    />\r\n  </Container>\r\n);\r\n\r\nexport default withTranslation()(Input);\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { StyledTextArea, StyledContainer, Label } from \"./styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst TextArea = ({ name, value, placeholder, onChange, t }: InputProps) => (\r\n  <StyledContainer>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledTextArea\r\n      placeholder={t(placeholder)}\r\n      id={name}\r\n      name={name}\r\n      value={value}\r\n      onChange={onChange}\r\n    />\r\n  </StyledContainer>\r\n);\r\n\r\nexport default withTranslation()(TextArea);\r\n","import styled from \"styled-components\";\r\n\r\nexport const ContactContainer = styled(\"div\")`\r\n  padding: 5rem 0;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 3rem 0;\r\n  }\r\n`;\r\n\r\nexport const FormGroup = styled(\"form\")`\r\n  width: 100%;\r\n  max-width: 520px;\r\n\r\n  @media only screen and (max-width: 1045px) {\r\n    max-width: 100%;\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nexport const Span = styled(\"span\")<any>`\r\n  display: block;\r\n  font-weight: 600;\r\n  color: rgb(255, 130, 92);\r\n  height: 0.775rem;\r\n  padding: 0 0.675rem;\r\n`;\r\n\r\nexport const ButtonContainer = styled(\"div\")`\r\n  text-align: end;\r\n  position: relative;\r\n\r\n  @media only screen and (max-width: 414px) {\r\n    padding-top: 0.75rem;\r\n  }\r\n`;\r\n","import { Row, Col } from \"antd\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { Slide, Zoom } from \"react-awesome-reveal\";\r\nimport { ContactProps, ValidationTypeProps } from \"./types\";\r\nimport { useForm } from \"../../common/utils/useForm\";\r\nimport validate from \"../../common/utils/validationRules\";\r\nimport { Button } from \"../../common/Button\";\r\nimport Block from \"../Block\";\r\nimport Input from \"../../common/Input\";\r\nimport TextArea from \"../../common/TextArea\";\r\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from \"./styles\";\r\n\r\nconst Contact = ({ title, content, id, t }: ContactProps) => {\r\n  const { values, errors, handleChange, handleSubmit } = useForm(\r\n    validate\r\n  ) as any;\r\n\r\n  const ValidationType = ({ type }: ValidationTypeProps) => {\r\n    const ErrorMessage = errors[type];\r\n    return (\r\n      <Zoom direction=\"left\">\r\n        <Span erros={errors[type]}>{ErrorMessage}</Span>\r\n      </Zoom>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ContactContainer id={id}>\r\n      <Row justify=\"space-between\" align=\"middle\">\r\n        <Col lg={12} md={11} sm={24} xs={24}>\r\n          <Slide direction=\"left\">\r\n            <Block title={title} content={t(content)} />\r\n          </Slide>\r\n        </Col>\r\n        <Col lg={12} md={12} sm={24} xs={24}>\r\n          <Slide direction=\"right\">\r\n            <FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"subject\"\r\n                  placeholder=\"Subject\"\r\n                  value={values.subject}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"subject\" />\r\n              </Col>\r\n              {/* <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"email\"\r\n                  placeholder=\"Your Email\"\r\n                  value={values.email || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"email\" />\r\n              </Col> */}\r\n              <Col span={24}>\r\n                <TextArea\r\n                  placeholder=\"Message\"\r\n                  value={values.message}\r\n                  name=\"message\"\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"message\" />\r\n              </Col>\r\n              <ButtonContainer>\r\n                <Button name=\"submit\">{t(\"Submit\")}</Button>\r\n              </ButtonContainer>\r\n            </FormGroup>\r\n          </Slide>\r\n        </Col>\r\n      </Row>\r\n    </ContactContainer>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Contact);\r\n"],"names":["baseValues","subject","message","useForm","validate","values","setValues","useState","errors","setErrors","shouldSubmit","setShouldSubmit","useEffect","Object","keys","length","notification","description","handleChange","event","persist","target","name","value","handleSubmit","preventDefault","err","window","location","href","encodeURIComponent","Content","styled","Container","TextWrapper","withTranslation","_ref","title","content","t","_jsxs","children","_jsx","StyledInput","StyledContainer","StyledTextArea","Label","placeholder","onChange","htmlFor","id","ContactContainer","FormGroup","Span","ButtonContainer","ValidationType","_ref2","type","ErrorMessage","Zoom","direction","erros","Row","justify","align","Col","lg","md","sm","xs","Slide","Block","autoComplete","onSubmit","span","Input","TextArea","Button"],"sourceRoot":""}